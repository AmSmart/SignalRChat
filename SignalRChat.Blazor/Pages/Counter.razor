@page "/general"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client

<h1>Welcome to SignalR with Blazor</h1>
<button class="btn btn-success" @onclick="async () => await ConnectToServer()" disabled="@isConnected">Connect</button>
<h3>Connection Status: @connectionStatus</h3>
<div class="row">

    <div class="col-4">
        <h3 class="text-success">Messages load here</h3>
        @foreach (var item in notifications)
        {
            <div class="card">
                <div class="card-header">
                    <span style="color: dodgerblue">@item.Key: </span><span>@item.Value</span>
                </div>
            </div>
        }
    <div>
        <label>
            Name:
            <input placeholder="Write your name" @bind="Name" />
        </label>
        <label>
            Message:
            <input placeholder="Write your message" @bind="Message" />
        </label>
        <button style="color: white; background-color: cadetblue" @onclick="async () => await Send()">Send</button>
    </div>
    </div>
</div>

@code {
    string url = "http://localhost:62947/notificationhub";

    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed";
    string Message;
    string Name;
    List<KeyValuePair<string, string>> notifications = new List<KeyValuePair<string, string>>();

    private async Task Send()
    {
        if (string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Message))
        {
            string errorMessage = "Name and Message textboxes cannot be blank";
            await JSRuntime.InvokeAsync<object>("Alert", errorMessage);
            return;
        }
        await httpClient.PostAsync($"http://localhost:62947/posttoall?userName={Name}&message={Message}", null);
    }

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Connected 😜";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<string, string>("notification", (user, message) =>
         {
             notifications.Add(KeyValuePair.Create(user, message));
             StateHasChanged();
         });
    }

}
